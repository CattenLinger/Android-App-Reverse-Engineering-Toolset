#!/bin/bash
#
# Created by CattenLinger
# Date: 2018-12-19
#

workDir=$(pwd)
outputDir="${workDir}/output"
if [ ! -d "$outputDir" ]; then
  mkdir "$outputDir"
fi

oat2dex="${workDir}/oat2dex.jar"
dex2jar="${workDir}/dex-tools/d2j-dex2jar.sh"
jdcli="${workDir}/jd-cli.jar"

echo

#
#   Check abilities
#

fwPath="${workDir}/framework"
if [ ! -d "$fwPath" ]; then
  mkdir "$fwPath"
fi
hasFramework="f"
canDeoptimize="f"
function checkFrameworkDir {
    if [ "l$(ls "${fwPath}")" = "l" ]; then
        echo "# Android System Framework #############################"
        echo "#   The framework directory is empty.                  #"
        echo "#                                                      #"
        echo "#   Please consider to pull the /system/framework form #"
        echo "#   your phone for de-optimizing .odex files           #"
        echo "########################################################"
        echo
    else
        hasFramework="t"
        canDeoptimize="t"
    fi
}

decodedFw="${workDir}/framework-decoded"
if [ ! -d "$decodedFw" ]; then
  mkdir "$decodedFw"
fi
hasDecodedFw="f"
function checkhasDecodedFw {
    if [ "l$(ls "${decodedFw}")" != "l" ]; then
        hasDecodedFw="t"
    fi
}

hasAdb="f"
function checkAdb {
    if [ "c$(adb)" = "c" ]; then
        echo "# Android Debug Tools ##################################"
        echo "# It seems that you have no adb installed .            #"
        echo "# Consider to install one.                             #"
        echo "########################################################"
        echo
    else
        hasAdb="t"
    fi
}

hasJava="f"
function checkJava {
    if [ "c$(java -version 2>&1)" = "c" ]; then
        echo "# Java Runtime ########################################"
        echo "# It seems you have no java runtime!!                 #"
        echo "#                                                     #"
        echo "# You need java for do all these things! Install java #"
        echo "# and retry!                                          #"
        echo "########################################################"
    else
        hasJava="t"
    fi
}

#
# Print help info
#
function printHelp {
    echo "-----------------------------------------------------------------------------------"
    echo "       Android App de-compile toolset"
    echo "-----------------------------------------------------------------------------------"
    echo " Author: CattenLinger"
    echo " Email: cattenlinger@outlook.com"
    echo " Github: https://github.com/CattenLinger/Android-App-Reverse-Engineering-Toolset"
    echo "-----------------------------------------------------------------------------------"
    echo 
    echo "Useage: "
    echo '    pull | -p <framework|app>: Pull files from device'
    if [ $hasAdb = "f" ]; then
    echo '        ** Currently not avaliable, ADB required'
    fi
    echo '        framework | -fw : Pull system framework'
    echo '            If framework exists, ask to overwrite or not'
    echo "            ${0} -fw <--force>"
    echo '            <--force>: Optional, delete exists framework'
    echo
    echo '        app | -a : Pull system application.'
    echo '            It will operates in /system/app and /system/priv-app folders.'
    echo "            ${0} -a [-l|-a|-p|app name] [app name]"
    echo '                           [list | -l]: List files in app & priv-app only'
    echo '                  [app |-a] <app name>: Pull app from /system/app'
    echo '            [priv-app | -p] [app name]: Pull app from /system/priv-app'
    echo '                            [app name]: Pull app, auto find in those two'
    echo '                                        folders'

    echo '    framework | -f : De-optimize framework'
    if [ $hasFramework = "f" ]; then
    echo '        ** Currently not avaliable, framework required'
    fi
    echo
    
    echo '    odex | -o : De-optimize odex'
    if [ $canDeoptimize = "f" ]; then
    echo '        ** Currently not avaliable, require framework'
    fi
    echo "        ${0} -o [filename] <output folder>"
    echo '             [filename]: Required, odex file'
    echo '        <output folder>: Optional, where to output dex file'
    echo
    echo '    dex | -d : De-compile dex'
    echo "        ${0} -d [filename] <output filename>"
    echo '             [filename]: Required, dex file'
    echo '        <output folder>: Optional, de-compiled jar file output'
    echo
    echo '    jar | -j : De-compile jar to source file'
    echo "        ${0} -j [filename] <output options> <output target>"
    echo '                  [filename]: Required, the origin jar file name'
    echo '            <output options>: Optional, three options:'
    echo '                 --jar | -j : output jar'
    echo '                 --zip | -z : output jar and change suffix to "zip"'
    echo '                 --dir | -d : output to directory, default'
    echo '             <output target>: Optional, where to output'
    echo '                              If --dir used, target should be a directory'
    echo '                              If --zip | --jar used, target should be a file'
    echo


    echo "Function list:"
    
    echo -n '    '
    if [ $hasAdb = "t" ]; then echo -n '✔'; else echo -n ' ✖';fi;
    echo " pull";
    
    echo -n '    '
    if [ $hasFramework = "t" ]; then echo -n '✔'; else echo -n ' ✖';fi;
    echo " framework";

    echo -n '    '
    if [ $canDeoptimize = "t" ]; then echo -n '✔'; else echo -n ' ✖';fi;
    echo " odex";

    echo -n '    ';
    echo '✔ dex';
    echo -n '    ';
    echo '✔ jar';
}


adbDeviceAttached="f"
selectedDevice=""
function checkDevices {
    local oldIFS=$(echo -n "$IFS")
    IFS=$'\n'
    local listOfDevices=($(adb devices))
    selectedDevice=${listOfDevices[1]}
    if [ "d${selectedDevice}" != "d" ]; then
        adbDeviceAttached="t"
        echo "Devices: ${selectedDevice}"
    fi
    
    IFS=$(echo -n "${oldIFS}")
}

#
#   Pull files from phone
#

function handlePullSystemFramework {
    local option="${3}"

    if [ "s$option" != "s--force" ]; then
        if [ "$hasFramework" = "t" ]; then
            while true; do
                echo "Framework directory is not empty, override?(yes/no):"
                read override
                case $override in
                    "yes" | "YES" | "y")
                        break;
                        ;;

                    "no" | "NO" | "n") 
                        exit 0; 
                        break;
                        ;;

                    *) 
                        echo "Framework directory is not empty, override?"; 
                        ;;
                esac
            done
        fi
    fi

    echo "Pulling framework files...";
    eval "rm -rf \"${fwPath}\""
    eval "adb pull \"/system/framework\" \"${workDir}\"";
    echo "finished"; 
}

function handlePullApps {
    local target="${3}"
    local app="${4}"
    case $target in
        "list" | "-l")
            eval "adb shell ls -l /system/app /system/priv-app";
            ;;

        "app" | "-a")
            if [ "s$app" != "s" ]; then eval "adb pull \"/system/app/${app}\" \"${outputDir}\"";
            else echo "Need a app name"; fi;
            ;;

        "priv-app" | "-p")
            if [ "s$app" != "s" ]; then eval "adb pull \"/system/priv-app/${app}\" \"${outputDir}\"";
            else echo "Need a app name"; fi;
            ;;

        *)
            local oldIFS=$(echo -n "$IFS")
            IFS=$'\n'
            local findResult=($(adb shell find /system/priv-app /system/app -name "${target}"));
            if [ ${#findResult[*]} = 0 ]; then 
                echo "No app named ${target} found.";
            else
                for appPath in $findResult; do
                    eval "adb pull \"${appPath}\" "${outputDir}"";
                done
            fi
            IFS=$(echo -n "$oldIFS");
            ;;
    esac
}

function pullMode {
    if [ $hasAdb = "f" ]; then 
        echo "You have no adb installed."
    else
        checkDevices
        if [ "${adbDeviceAttached}" = "f" ]; then
            echo "It seems no device attached."
            echo "Please connect a device and allow access from this computer."
            echo
        else
            local pullOption="${2}"
            case "$pullOption" in
                "framework" | "-fw")
                    handlePullSystemFramework "$@";
                    ;;
                "app")
                    handlePullApps "$@";
                    ;;
                *)
                    echo "Unknown option: ${pullOption}";
                    echo ;
                    printHelp;
                    exit -1;
                    ;;
            esac
        fi
    fi
}

#
# De-optmize odex file to dex
#
function handleOdex {
    if [ $hasFramework = "f" ]; then
        echo "Can't de-optimize without a framework."
    else
        local file=${1}
        local outputFolder=${2}

        if [ "f${outputFolder}" = "f" ]; then
            outputFolder=${outputDir}
        fi

        eval "java -jar \"${oat2dex}\" -o \"${outputFolder}\" \"${file}\" \"${fwPath}\""
        echo "Finished."
    fi
}

#
# De-compile dex to Jar 
#
function handleDex {
    local file=${1}
    local outputFile=${2}

    if [ "f${outputFile}" = "f" ]; then
        outputFile="${outputDir}/$(basename "${1}" | sed 's/\(.*\)\.dex/\1\.jar/')"
    fi

    eval "\"${dex2jar}\" -o \"${outputFile}\" \"${file}\""
    echo "Finished."
}

#
#   De-optimize framework
#
function handleFramework {
    if [ "$hasFramework" = "f" ]; then
        echo "You have no Android System Framewrok."
    else
        eval "java -jar \"${oat2dex}\" -o \"${decodeFw}\" devfw \"${fwPath}\""
        echo "Finished."
    fi
}

#
# De-compile Jar 
#
function handleJar {
    local jarFilePath="${2}"
    local jarFile=$(basename "${2}")

    local cmd="java -jar \"${jdcli}\" \"${jarFilePath}\" -n -g ALL"
    local outputOption="${3}"

    local outputFile="${4}"
    if [ "f$outputOption" = "f" ]; then 
        outputOption="-d"; 
    fi

    local filename=''
    if [ "f${outputFile}" == "f" ]; then
        case ${outputOption} in
            "--zip" | "-z") 
                filename=$(basename "${jarFile}" | sed 's/\(.*\)\.jar/\1\.src\.zip/');
                cmd="$cmd -oz";
                ;;
            "--jar" | "-j") 
                filename=$(basename "${jarFile}" | sed 's/\(.*\)\.jar/\1\.src\.jar/');
                cmd="$cmd -oz";
                ;;
            "--dir" | "-d") 
                filename=$(basename "${jarFile}" | sed 's/\(.*\)\.jar/\1/');
                cmd="$cmd -od";
                ;;
            *) 
                echo "Error: Unknown option ${outputOption}"; 
                echo; 
                printHelp; 
                exit -1; 
                ;;
        esac;
        outputFile="${outputDir}/${filename}";
    else
        case ${outputOption} in
            "--zip" | "-z" | "--jar" | "-j")
                cmd="$cmd -oz"; ;;
            *)
                cmd="$cmd -od"; ;;
        esac
    fi

    eval "${cmd} \"${outputFile}\""

    echo "Finshed."
}

# 
# Main programe
# 
checkJava
checkFrameworkDir
checkhasDecodedFw
checkAdb

#
# Only enable when you want to see bootstrap hints
#

# hasAdb="f"
# hasDecodedFw="f"
# hasFramework="f"
# canDeoptimize="f"

if [ $hasJava = "f" ]; then
    echo "Exited because there no java installed."
else
    case ${1} in
        "pull" | "-p") 
            pullMode "$@"; 
            ;;

        "odex" | "-o") 
            handleOdex "${2}" "${3}"; 
            ;;

        "dex" | "-d") 
            handleDex "${2}" "${3}"; 
            ;;

        "jar" | "-j") 
            handleJar "$@"; 
            ;;

        "framework" | "-f") 
            handleFramework; 
            ;;

        "dry-run") 
            checkDevices; 
            ;;
        *) 
            printHelp; 
            ;;
    esac;
fi
    